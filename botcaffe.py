import os
import asyncio
import logging
import sqlite3
import pytz
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
class Database:
    def __init__(self):
        self.conn = sqlite3.connect("anticafe.db", check_same_thread=False)
        self.cursor = self.conn.cursor()
        self._create_tables()

    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.cursor.execute("""CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY, 
                      username TEXT, 
                      full_name TEXT,
                      phone TEXT,
                      reg_date TEXT)""")

        self.cursor.execute("""CREATE TABLE IF NOT EXISTS visits
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      visit_date TEXT,
                      FOREIGN KEY(user_id) REFERENCES users(user_id))""")

        self.cursor.execute("""CREATE TABLE IF NOT EXISTS events
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      title TEXT,
                      description TEXT,
                      event_date TEXT,
                      photo_id TEXT)""")
        
        self.cursor.execute("""CREATE TABLE IF NOT EXISTS admins
                     (user_id INTEGER PRIMARY KEY)""")
        
        self.conn.commit()

    def add_admin(self, user_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.cursor.execute("INSERT OR IGNORE INTO admins VALUES (?)", (user_id,))
        self.conn.commit()

    def is_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.cursor.execute("SELECT 1 FROM admins WHERE user_id = ?", (user_id,))
        return bool(self.cursor.fetchone())

    def add_user(self, user_id, username, full_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        reg_date = datetime.now(pytz.timezone('Europe/Moscow')).strftime("%Y-%m-%d %H:%M:%S")
        self.cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, username, full_name, reg_date) VALUES (?, ?, ?, ?)",
            (user_id, username, full_name, reg_date)
        )
        self.conn.commit()

    def update_phone(self, user_id, phone):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        self.cursor.execute(
            "UPDATE users SET phone = ? WHERE user_id = ?",
            (phone, user_id)
        )
        self.conn.commit()

    def add_visit(self, user_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è"""
        visit_date = datetime.now(pytz.timezone('Europe/Moscow')).strftime("%Y-%m-%d %H:%M:%S")
        self.cursor.execute(
            "INSERT INTO visits (user_id, visit_date) VALUES (?, ?)",
            (user_id, visit_date)
        )
        self.conn.commit()
        return self.get_visits_count(user_id)

    def get_visits_count(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π"""
        self.cursor.execute(
            "SELECT COUNT(*) FROM visits WHERE user_id = ?",
            (user_id,)
        )
        return self.cursor.fetchone()[0]

    def get_all_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.cursor.execute("SELECT user_id FROM users")
        return [row[0] for row in self.cursor.fetchall()]

    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.cursor.execute("SELECT COUNT(*) FROM users")
        total_users = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM visits")
        total_visits = self.cursor.fetchone()[0]
        
        self.cursor.execute("""
            SELECT u.full_name, COUNT(v.id) as visits 
            FROM users u
            LEFT JOIN visits v ON u.user_id = v.user_id
            GROUP BY u.user_id
            ORDER BY visits DESC
            LIMIT 5
        """)
        top_users = self.cursor.fetchall()
        
        return total_users, total_visits, top_users

    def add_event(self, title, description, event_date, photo_id=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        self.cursor.execute(
            "INSERT INTO events (title, description, event_date, photo_id) VALUES (?, ?, ?, ?)",
            (title, description, event_date, photo_id)
        )
        self.conn.commit()

    def get_events(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        self.cursor.execute("SELECT * FROM events ORDER BY event_date")
        return self.cursor.fetchall()

db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    phone = State()
    event_title = State()
    event_description = State()
    event_date = State()
    event_photo = State()
    mailing_message = State()
    feedback = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(user_id: int) -> bool:
    return db.is_admin(user_id)

# ---- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ----

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    db.add_user(message.from_user.id, message.from_user.username, message.from_user.full_name)
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∞–Ω—Ç–∏–∫–∞—Ñ–µ!\n\n"
        "üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True
        )
    )

@dp.message(F.contact)
async def process_phone(message: types.Message):
    db.update_phone(message.from_user.id, message.contact.phone_number)
    await message.answer(
        "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await show_main_menu(message)

# ---- –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ----

async def show_main_menu(message: types.Message):
    visits_count = db.get_visits_count(message.from_user.id)
    remaining = 7 - (visits_count % 7) if visits_count % 7 != 0 else 0
    
    text = (
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"üîÑ –ü–æ—Å–µ—â–µ–Ω–∏–π: {visits_count}\n"
        f"üé´ –î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ: {remaining}"
    )
    
    if remaining == 0 and visits_count > 0:
        text += "\n\nüéâ –£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ!"
    
    await message.answer(
        text,
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="‚òï –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ")],
                [types.KeyboardButton(text="üéÅ –ú–æ–∏ –±–æ–Ω—É—Å—ã"), types.KeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏—è")],
                [types.KeyboardButton(text="üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã"), types.KeyboardButton(text="‚úâÔ∏è –û—Ç–∑—ã–≤")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "‚òï –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ")
async def mark_visit(message: types.Message):
    visits_count = db.add_visit(message.from_user.id)
    
    if visits_count % 7 == 0:
        await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ ‚Ññ7 - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ!")
    else:
        await message.answer(
            f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ! –í—Å–µ–≥–æ: {visits_count}\n"
            f"–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ: {7 - (visits_count % 7)}"
        )
    
    await show_main_menu(message)

@dp.message(F.text == "üéÅ –ú–æ–∏ –±–æ–Ω—É—Å—ã")
async def show_bonuses(message: types.Message):
    visits_count = db.get_visits_count(message.from_user.id)
    await message.answer(
        f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:\n\n"
        f"‚òï –ü–æ—Å–µ—â–µ–Ω–∏–π: {visits_count}\n"
        f"üéÅ –î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ: {7 - (visits_count % 7)}"
    )

@dp.message(F.text == "üìÖ –°–æ–±—ã—Ç–∏—è")
async def show_events(message: types.Message):
    events = db.get_events()
    
    if not events:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        return
    
    for event in events:
        event_id, title, description, event_date, photo_id = event
        formatted_date = datetime.strptime(event_date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y –≤ %H:%M")
        
        text = f"üé™ <b>{title}</b>\nüìÖ {formatted_date}\n\n{description}"
        
        if photo_id:
            await message.answer_photo(photo_id, caption=text)
        else:
            await message.answer(text)

# ---- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ----

@dp.message(F.text == "/admin")
async def admin_panel(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.answer(
        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [types.KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
                [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")],
                [types.KeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if not await is_admin(message.from_user.id):
        return
    
    total_users, total_visits, top_users = db.get_stats()
    
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üîÑ –ü–æ—Å–µ—â–µ–Ω–∏–π: {total_visits}\n\n"
        f"üèÜ –¢–æ–ø-5 –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"
    )
    
    for i, (name, visits) in enumerate(top_users, 1):
        text += f"{i}. {name}: {visits} –ø–æ—Å–µ—â–µ–Ω–∏–π\n"
    
    await message.answer(text)

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_mailing(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.mailing_message)

@dp.message(Form.mailing_message)
async def process_mailing(message: types.Message, state: FSMContext):
    users = db.get_all_users()
    success = 0
    
    for user_id in users:
        try:
            await bot.send_message(user_id, message.text)
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await message.answer(
        f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(users)}",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()
    await admin_panel(message)

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def start_adding_event(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.event_title)

@dp.message(Form.event_title)
async def process_event_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(Form.event_description)

@dp.message(Form.event_description)
async def process_event_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    await state.set_state(Form.event_date)

@dp.message(Form.event_date)
async def process_event_date(message: types.Message, state: FSMContext):
    try:
        event_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(event_date=event_date.strftime("%Y-%m-%d %H:%M:%S"))
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
        await state.set_state(Form.event_photo)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

@dp.message(Form.event_photo)
async def process_event_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    if message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photo_id = None
    elif message.photo:
        photo_id = message.photo[-1].file_id
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    db.add_event(data['title'], data['description'], data['event_date'], photo_id)
    
    await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await state.clear()
    await admin_panel(message)

@dp.message(F.text == "‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await show_main_menu(message)

# ---- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----

@dp.message(F.text == "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    await message.answer(
        "üè† –ù–∞—à –∞–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\n"
        "üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 10:00-22:00, –°–±-–í—Å 11:00-23:00"
    )

@dp.message(F.text == "‚úâÔ∏è –û—Ç–∑—ã–≤")
async def start_feedback(message: types.Message, state: FSMContext):
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.feedback)

@dp.message(Form.feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    await state.clear()
    await show_main_menu(message)

# ---- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----

async def main():
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    db.add_admin(586842186)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())